Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> INICIO cuerpo FIN programa_end
Rule 2     programa_end -> <empty>
Rule 3     expresion -> Numero Punto Numero
Rule 4     cuerpo -> lista_declaraciones
Rule 5     lista_declaraciones -> lista_declaraciones declaracion
Rule 6     lista_declaraciones -> declaracion
Rule 7     declaracion -> tipo lista_variables puntocoma
Rule 8     tipo -> const
Rule 9     tipo -> var
Rule 10    lista_variables -> lista_variables Coma ID
Rule 11    lista_variables -> ID
Rule 12    asignacion -> ID Asigna expresion puntocoma
Rule 13    estructura_control -> sentencia_if
Rule 14    estructura_control -> sentencia_while
Rule 15    sentencia_if -> Si condicion entonces cuerpo FIN
Rule 16    sentencia_while -> mientras condicion hacer cuerpo FIN
Rule 17    condicion -> expresion comparador expresion
Rule 18    comparador -> Menor
Rule 19    comparador -> Mayor
Rule 20    comparador -> Menorigual
Rule 21    comparador -> Mayorigual
Rule 22    comparador -> Dif
Rule 23    expresion -> expresion Mas expresion
Rule 24    expresion -> expresion Menos expresion
Rule 25    expresion -> expresion Por expresion
Rule 26    expresion -> expresion Entre expresion
Rule 27    expresion -> ID
Rule 28    expresion -> Numero
Rule 29    expresion -> izpar expresion derpar
Rule 30    escritura -> print izpar expresion derpar puntocoma

Terminals, with rules where they appear

Asigna               : 12
Coma                 : 10
Dif                  : 22
Entre                : 26
FIN                  : 1 15 16
ID                   : 10 11 12 27
INICIO               : 1
Mas                  : 23
Mayor                : 19
Mayorigual           : 21
Menor                : 18
Menorigual           : 20
Menos                : 24
Numero               : 3 3 28
Por                  : 25
Punto                : 3
Si                   : 15
const                : 8
derpar               : 29 30
entonces             : 15
error                : 
hacer                : 16
izpar                : 29 30
mientras             : 16
print                : 30
puntocoma            : 7 12 30
var                  : 9

Nonterminals, with rules where they appear

asignacion           : 
comparador           : 17
condicion            : 15 16
cuerpo               : 1 15 16
declaracion          : 5 6
escritura            : 
estructura_control   : 
expresion            : 12 17 17 23 23 24 24 25 25 26 26 29 30
lista_declaraciones  : 4 5
lista_variables      : 7 10
programa             : 0
programa_end         : 1
sentencia_if         : 13
sentencia_while      : 14
tipo                 : 7

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . INICIO cuerpo FIN programa_end

    INICIO          shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> INICIO . cuerpo FIN programa_end
    (4) cuerpo -> . lista_declaraciones
    (5) lista_declaraciones -> . lista_declaraciones declaracion
    (6) lista_declaraciones -> . declaracion
    (7) declaracion -> . tipo lista_variables puntocoma
    (8) tipo -> . const
    (9) tipo -> . var

    const           shift and go to state 7
    var             shift and go to state 8

    cuerpo                         shift and go to state 3
    lista_declaraciones            shift and go to state 4
    declaracion                    shift and go to state 5
    tipo                           shift and go to state 6

state 3

    (1) programa -> INICIO cuerpo . FIN programa_end

    FIN             shift and go to state 9


state 4

    (4) cuerpo -> lista_declaraciones .
    (5) lista_declaraciones -> lista_declaraciones . declaracion
    (7) declaracion -> . tipo lista_variables puntocoma
    (8) tipo -> . const
    (9) tipo -> . var

    FIN             reduce using rule 4 (cuerpo -> lista_declaraciones .)
    const           shift and go to state 7
    var             shift and go to state 8

    declaracion                    shift and go to state 10
    tipo                           shift and go to state 6

state 5

    (6) lista_declaraciones -> declaracion .

    const           reduce using rule 6 (lista_declaraciones -> declaracion .)
    var             reduce using rule 6 (lista_declaraciones -> declaracion .)
    FIN             reduce using rule 6 (lista_declaraciones -> declaracion .)


state 6

    (7) declaracion -> tipo . lista_variables puntocoma
    (10) lista_variables -> . lista_variables Coma ID
    (11) lista_variables -> . ID

    ID              shift and go to state 12

    lista_variables                shift and go to state 11

state 7

    (8) tipo -> const .

    ID              reduce using rule 8 (tipo -> const .)


state 8

    (9) tipo -> var .

    ID              reduce using rule 9 (tipo -> var .)


state 9

    (1) programa -> INICIO cuerpo FIN . programa_end
    (2) programa_end -> .

    $end            reduce using rule 2 (programa_end -> .)

    programa_end                   shift and go to state 13

state 10

    (5) lista_declaraciones -> lista_declaraciones declaracion .

    const           reduce using rule 5 (lista_declaraciones -> lista_declaraciones declaracion .)
    var             reduce using rule 5 (lista_declaraciones -> lista_declaraciones declaracion .)
    FIN             reduce using rule 5 (lista_declaraciones -> lista_declaraciones declaracion .)


state 11

    (7) declaracion -> tipo lista_variables . puntocoma
    (10) lista_variables -> lista_variables . Coma ID

    puntocoma       shift and go to state 14
    Coma            shift and go to state 15


state 12

    (11) lista_variables -> ID .

    puntocoma       reduce using rule 11 (lista_variables -> ID .)
    Coma            reduce using rule 11 (lista_variables -> ID .)


state 13

    (1) programa -> INICIO cuerpo FIN programa_end .

    $end            reduce using rule 1 (programa -> INICIO cuerpo FIN programa_end .)


state 14

    (7) declaracion -> tipo lista_variables puntocoma .

    const           reduce using rule 7 (declaracion -> tipo lista_variables puntocoma .)
    var             reduce using rule 7 (declaracion -> tipo lista_variables puntocoma .)
    FIN             reduce using rule 7 (declaracion -> tipo lista_variables puntocoma .)


state 15

    (10) lista_variables -> lista_variables Coma . ID

    ID              shift and go to state 16


state 16

    (10) lista_variables -> lista_variables Coma ID .

    puntocoma       reduce using rule 10 (lista_variables -> lista_variables Coma ID .)
    Coma            reduce using rule 10 (lista_variables -> lista_variables Coma ID .)

